name: Run terraform plan

on:
  pull_request:
    paths:
      - 'hwahae-api/**'
      - '.github/**'

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: terraform_plan_apply
    env:
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_TOKEN: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
    concurrency:
      group: terraform-execute

    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_hostname: "app.terraform.io"
        cli_config_credentials_token: ${{ env.TF_TOKEN }}
        terraform_version: "1.5.7"

    - name: Terraform fmt
      id: fmt
      run: cd hwahae-api && terraform fmt -check

    - name: Terraform Init
      id: init
      run: cd hwahae-api && terraform init

    - name: Terraform Validate
      id: validate
      run: cd hwahae-api && terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        PLAN=$(cd hwahae-api && terraform plan -var AWS_ACCESS_KEY_ID=${{env.AWS_ACCESS_KEY_ID}} -var AWS_SECRET_ACCESS_KEY=${{env.AWS_SECRET_ACCESS_KEY}} -var AWS_SESSION_TOKEN=${{env.AWS_SESSION_TOKEN}} -no-color -refresh=false)

        regex='Terraform will perform the following actions:(.*)'
        if [[ $PLAN =~ $regex ]]; then
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "EXTRACTED_PLAN<<$EOF" >> $GITHUB_OUTPUT
          echo "${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
        else
          echo "EXTRACTED_PLAN=No actions specified in the plan." >> $GITHUB_OUTPUT
        fi

    - name: Show Plan
      uses: actions/github-script@v6
      env:
        PLAN: "${{ steps.plan.outputs.EXTRACTED_PLAN }}"

      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

