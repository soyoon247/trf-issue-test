name: Run terraform plan

on:
  push:
    paths:
      - 'hwahae-api/**'
  pull_request:
    paths:
      - 'hwahae-api/**'

jobs:
  check-plan-target:
    runs-on: ubuntu-latest
    outputs:
      IS_TARGET: ${{ steps.check-branch.outputs.IS_MAIN_BRANCH == 'false' && steps.check-pr.outputs.PR_EXISTS == 'false' }}

    steps:
    - name: Check target branch
      id: check-branch
      run: |
        echo "IS_MAIN_BRANCH=false" >> $GITHUB_OUTPUT
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "IS_MAIN_BRANCH=true" >> $GITHUB_OUTPUT
        fi
    - name: Check PR exists
      id: check-pr
      run: |
        echo "PR_EXISTS=false" >> $GITHUB_OUTPUT
        if [ "${{ github.event_name }}" == "push" ]; then
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's#refs/heads/##')
          PR_EXISTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                       "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${BRANCH_NAME}" | \
                       jq '. | length > 0')
          echo "PR_EXISTS=$PR_EXISTS" >> $GITHUB_OUTPUT
        fi

  terraform-plan:
    needs: [check-plan-target]
    if: needs.check-plan-target.outputs.IS_TARGET == 'true'
    runs-on: ubuntu-latest
    environment: terraform_plan_apply
    env:
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_TOKEN: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
    concurrency:
      group: terraform-plan

    steps:
    - uses: actions/checkout@v3

    - uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_hostname: "app.terraform.io"
        cli_config_credentials_token: ${{ env.TF_TOKEN }}
        terraform_version: "1.5.7"

    - name: Terraform fmt
      id: fmt
      run: cd hwahae-api && terraform fmt -check

    - name: Terraform Init
      id: init
      run: cd hwahae-api && terraform init

    - name: Terraform Validate
      id: validate
      run: cd hwahae-api && terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: cd hwahae-api && terraform plan -var AWS_ACCESS_KEY_ID=${{env.AWS_ACCESS_KEY_ID}} -var AWS_SECRET_ACCESS_KEY=${{env.AWS_SECRET_ACCESS_KEY}} -no-color

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

